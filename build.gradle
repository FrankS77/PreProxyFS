/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3/userguide/java_library_plugin.html
 */
import org.gradle.internal.os.OperatingSystem

plugins {
    id 'application'
    id 'java-library'
    id 'org.ajoberstar.grgit' version '4.1.1'
    id 'org.mikeneck.graalvm-native-image' version 'v1.4.1'
    id 'name.remal.sonarlint' version '1.5.0'
    id 'checkstyle'
    id "com.diffplug.spotless" version "6.1.0"
    id 'jacoco'
    id 'distribution'
}

application {
    mainClass = 'de.fschullerer.preproxyfs.PreProxyFS'
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.slf4j:slf4j-simple:1.7.30'
    implementation 'org.slf4j:slf4j-api:1.7.30'
    implementation ('org.javadelight:delight-rhino-sandbox:0.0.13') {
        transitive = false
    }
    implementation 'org.mozilla:rhino:1.7.13'
    // not use proxy-vole > 1.0.4, we want to use the rhino not nashorn engine
    implementation ('com.github.markusbernhardt:proxy-vole:1.0.4') {
        transitive = false
    }
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    testImplementation 'org.junit.platform:junit-platform-runner:1.7.0'
    testImplementation 'org.junit.platform:junit-platform-suite-api:1.7.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.6.28'
    testImplementation 'org.assertj:assertj-core:3.18.1'
    testImplementation 'org.awaitility:awaitility:4.1.1'
}

jacocoTestReport {
    dependsOn test
}

spotless {
    java {
        importOrder()
        googleJavaFormat().aosp()
        removeUnusedImports()
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}
check.dependsOn jacocoTestCoverageVerification

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}

def getRepositoryVersion() {
    def version = ''
    try {
        def latestCommitDate = grgit.log(maxCommits: 1).get(0).date
        version = latestCommitDate.format('yyyy-MM-dd')
    } catch (all) {
        version = '1.0'
    }
    return version
}

version = getRepositoryVersion()
group   = 'de.fschullerer'

tasks.withType(JavaCompile) {
    options.encoding = javaEncoding
}

task sourcesJar(type: Jar, dependsOn:classes) {
    from sourceSets.main.java
    archiveClassifier = 'sources'
    manifest {
        attributes 'Implementation-Title': project.name, 'Implementation-Version': archiveVersion
    }
}

// by default, implementation cannot be referenced,
// this allows us to use it below
project.configurations.implementation.setCanBeResolved(true)
jar {
    dependsOn sourcesJar
    doFirst {
        manifest {
            attributes 'Implementation-Title': project.name,
                    'Implementation-Version': archiveVersion,
                    'Main-Class': application.mainClass,
                    'Built-Gradle': gradle.gradleVersion,
                    'Built-Host': java.net.InetAddress.getLocalHost().getHostName(),
                    'Source-Compatibility': project.sourceCompatibility,
                    'Target-Compatibility': project.targetCompatibility,
                    'Build-Time': new Date().format('yyyy-MM-dd_HH-mm'),
                    'Class-Path': configurations.compileClasspath.collect { 'lib/' + it.name }.join(' ')
        }
    }
}

sonarlint {
    // https://remal.gitlab.io/gradle-plugins/plugins/name.remal.sonarlint/
    // fail for sonarlint issues
    ignoreFailures = false
    excludes {
        // exclude TODO warnings
        message 'java:S1135'
    }
}

checkstyle {
    toolVersion '8.38'
    ignoreFailures = false
    maxErrors = 0
    maxWarnings = 0
    configDirectory = rootProject.file('src/main/resources/checkstyle')
}

checkstyleMain {
    source = 'src/main/java'
}

nativeImage {
    // Attention: JAVA_HOME must be a GraalVM!
    graalVmHome = System.getProperty('java.home')
    mainClass = 'de.fschullerer.preproxyfs.PreProxyFS'
    executableName = 'PreProxyFS'
    outputDirectory = file("$buildDir/bin")
    arguments {
        add '--no-fallback'
        add '--enable-all-security-services'
        add '--allow-incomplete-classpath'
        add '--enable-url-protocols=http'
        add '--report-unsupported-elements-at-runtime'
    }
}

generateNativeImageConfig {
    enabled = false
    byRunningApplicationWithoutArguments()
}

distributions {
    main {
        contents {
            from 'README.md'
            from 'PreProxyFSexample.properties'
        }
    }
}

def getOS() {
    def os
    switch (OperatingSystem.current()) {
        case OperatingSystem.LINUX:
            os = "Linux";
            break;
        case OperatingSystem.MAC_OS:
            os = "macOS";
            break;
        case OperatingSystem.WINDOWS:
            os = "Windows";
            break;
    }
    return os
}

task getVersion() {
    doLast {
        println project.version
    }
}

task printOS() {
    doLast {
        println "" + getOS()
    }
}

/**
 * Generate native image for distribution in a zip file.
 */
task packageDistribution(dependsOn: ['nativeImage'],type: Zip) {
     archiveFileName = "${project.name}-" + getOS() + "-" + getRepositoryVersion() +".zip"
     destinationDirectory = file("${project.buildDir}/distributions")
     // exclude GraalVM generated debug files for windows
     exclude("**/*.exp")
     exclude("**/*.lib")
     exclude("**/*.pdb")
     from file("${project.buildDir}/bin")
     from file("README.md")
     from file("PreProxyFSexample.properties")
}